{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNXb1jaXgF2HqpfnVPdDLRR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MigdalEder/MigdalEder/blob/main/Untitled0.ipynb%20Bird\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ndqluTVrFDS6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "b54f25bd-5854-4078-9798-d921430b5e54"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unindent does not match any outer indentation level (<tokenize>, line 202)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m202\u001b[0m\n\u001b[0;31m    }\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ],
      "source": [
        "<html><head><base href=\".\" />\n",
        "<meta charset=\"UTF-8\">\n",
        "<title>Bird Flight Adventure</title>\n",
        "<style>\n",
        "  body {\n",
        "    margin: 0;\n",
        "    overflow: hidden;\n",
        "    background: linear-gradient(to bottom, #87CEEB, #1E90FF);\n",
        "    font-family: Arial, sans-serif;\n",
        "  }\n",
        "\n",
        "  #game-container {\n",
        "    width: 100vw;\n",
        "    height: 100vh;\n",
        "    position: relative;\n",
        "  }\n",
        "\n",
        "  #bird {\n",
        "    width: 50px;\n",
        "    height: 40px;\n",
        "    position: absolute;\n",
        "    left: 100px;\n",
        "    top: 50%;\n",
        "    z-index: 10;\n",
        "  }\n",
        "\n",
        "  .obstacle {\n",
        "    position: absolute;\n",
        "    background: linear-gradient(to bottom, #228B22, #006400);\n",
        "    width: 60px;\n",
        "  }\n",
        "\n",
        "  #score {\n",
        "    position: fixed;\n",
        "    color: white;\n",
        "    font-size: 24px;\n",
        "    top: 20px;\n",
        "    left: 20px;\n",
        "    z-index: 100;\n",
        "    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\n",
        "  }\n",
        "\n",
        "  @keyframes wingFlap {\n",
        "    0% { transform: rotate(0deg); }\n",
        "    50% { transform: rotate(-20deg); }\n",
        "    100% { transform: rotate(0deg); }\n",
        "  }\n",
        "\n",
        "  #start-screen {\n",
        "    position: fixed;\n",
        "    top: 0;\n",
        "    left: 0;\n",
        "    width: 100%;\n",
        "    height: 100%;\n",
        "    background: rgba(0, 0, 0, 0.8);\n",
        "    display: flex;\n",
        "    flex-direction: column;\n",
        "    align-items: center;\n",
        "    justify-content: center;\n",
        "    z-index: 1000;\n",
        "    color: white;\n",
        "  }\n",
        "\n",
        "  #start-button {\n",
        "    padding: 15px 30px;\n",
        "    font-size: 24px;\n",
        "    background: #4CAF50;\n",
        "    color: white;\n",
        "    border: none;\n",
        "    border-radius: 5px;\n",
        "    cursor: pointer;\n",
        "    margin-top: 20px;\n",
        "  }\n",
        "\n",
        "  #start-button:hover {\n",
        "    background: #45a049;\n",
        "  }\n",
        "\n",
        "  .cloud {\n",
        "    position: absolute;\n",
        "    pointer-events: none;\n",
        "  }\n",
        "</style>\n",
        "</head>\n",
        "<body>\n",
        "<div id=\"start-screen\">\n",
        "  <h1>Bird Flight Adventure</h1>\n",
        "  <div class=\"instructions\">\n",
        "    <p>Press SPACE or Click to fly</p>\n",
        "    <p>Avoid the obstacles!</p>\n",
        "  </div>\n",
        "  <button id=\"start-button\">Start Game</button>\n",
        "</div>\n",
        "\n",
        "<div id=\"score\">Score: <span id=\"score-value\">0</span></div>\n",
        "<div id=\"game-container\">\n",
        "  <svg id=\"bird\" viewBox=\"0 0 50 40\">\n",
        "    <path d=\"M10,20 Q25,10 40,20 Q25,30 10,20\" fill=\"#FFD700\" stroke=\"#000\" stroke-width=\"2\"/>\n",
        "    <circle cx=\"35\" cy=\"18\" r=\"2\" fill=\"black\"/>\n",
        "    <path d=\"M15,15 Q25,5 35,15\" fill=\"#FFA500\" stroke=\"#000\" stroke-width=\"2\"/>\n",
        "  </svg>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "const gameContainer = document.getElementById('game-container');\n",
        "const bird = document.getElementById('bird');\n",
        "const scoreElement = document.getElementById('score-value');\n",
        "const startScreen = document.getElementById('start-screen');\n",
        "const startButton = document.getElementById('start-button');\n",
        "\n",
        "let score = 0;\n",
        "let birdPos = { y: window.innerHeight / 2 };\n",
        "let velocity = 0;\n",
        "let gravity = 0.5;\n",
        "let obstacles = [];\n",
        "let gameStarted = false;\n",
        "let gameLoop;\n",
        "let isGameOver = false;\n",
        "\n",
        "function createObstacle() {\n",
        "  const gap = 200;\n",
        "  const gapPosition = Math.random() * (window.innerHeight - gap - 100) + 50;\n",
        "\n",
        "  const topObstacle = document.createElement('div');\n",
        "  topObstacle.className = 'obstacle';\n",
        "  topObstacle.style.height = gapPosition + 'px';\n",
        "  topObstacle.style.top = '0';\n",
        "  topObstacle.style.left = window.innerWidth + 'px';\n",
        "\n",
        "  const bottomObstacle = document.createElement('div');\n",
        "  bottomObstacle.className = 'obstacle';\n",
        "  bottomObstacle.style.height = (window.innerHeight - gapPosition - gap) + 'px';\n",
        "  bottomObstacle.style.bottom = '0';\n",
        "  bottomObstacle.style.left = window.innerWidth + 'px';\n",
        "\n",
        "  gameContainer.appendChild(topObstacle);\n",
        "  gameContainer.appendChild(bottomObstacle);\n",
        "\n",
        "  obstacles.push({\n",
        "    top: topObstacle,\n",
        "    bottom: bottomObstacle,\n",
        "    passed: false\n",
        "  });\n",
        "}\n",
        "\n",
        "function createCloud() {\n",
        "  const cloud = document.createElement('div');\n",
        "  cloud.className = 'cloud';\n",
        "  cloud.style.left = window.innerWidth + 'px';\n",
        "  cloud.style.top = Math.random() * (window.innerHeight - 100) + 'px';\n",
        "\n",
        "  const svg = `\n",
        "    <svg width=\"100\" height=\"60\" viewBox=\"0 0 100 60\">\n",
        "      <path d=\"M10,40 Q30,20 50,40 Q70,20 90,40 Q100,30 90,20 Q80,10 70,20 Q60,5 50,20 Q40,5 30,20 Q20,10 10,20 Q0,30 10,40\"\n",
        "            fill=\"rgba(255,255,255,0.8)\"/>\n",
        "    </svg>\n",
        "  `;\n",
        "\n",
        "  cloud.innerHTML = svg;\n",
        "  gameContainer.appendChild(cloud);\n",
        "\n",
        "  const speed = 1 + Math.random();\n",
        "  const moveCloud = () => {\n",
        "    const left = parseFloat(cloud.style.left);\n",
        "    if (left < -100) {\n",
        "      cloud.remove();\n",
        "    } else {\n",
        "      cloud.style.left = (left - speed) + 'px';\n",
        "      requestAnimationFrame(moveCloud);\n",
        "    }\n",
        "  };\n",
        "\n",
        "  moveCloud();\n",
        "}\n",
        "\n",
        "function updateGame() {\n",
        "  if (!gameStarted || isGameOver) return;\n",
        "\n",
        "  velocity += gravity;\n",
        "  birdPos.y += velocity;\n",
        "\n",
        "  if (birdPos.y < 0) birdPos.y = 0;\n",
        "  if (birdPos.y > window.innerHeight - 40) {\n",
        "    gameOver();\n",
        "    return;\n",
        "  }\n",
        "\n",
        "  bird.style.top = birdPos.y + 'px';\n",
        "  bird.style.transform = `rotate(${velocity * 2}deg)`;\n",
        "\n",
        "  obstacles.forEach((obstacle, index) => {\n",
        "    const obstacleLeft = parseFloat(obstacle.top.style.left);\n",
        "    const newLeft = obstacleLeft - 5;\n",
        "\n",
        "    obstacle.top.style.left = newLeft + 'px';\n",
        "    obstacle.bottom.style.left = newLeft + 'px';\n",
        "\n",
        "    if (newLeft < -60) {\n",
        "      obstacle.top.remove();\n",
        "      obstacle.bottom.remove();\n",
        "      obstacles.splice(index, 1);\n",
        "    }\n",
        "\n",
        "    if (!obstacle.passed && newLeft < 80) {\n",
        "      obstacle.passed = true;\n",
        "      score++;\n",
        "      scoreElement.textContent = score;\n",
        "    }\n",
        "\n",
        "    // Collision detection\n",
        "    const birdRect = bird.getBoundingClientRect();\n",
        "    const topRect = obstacle.top.getBoundingClientRect();\n",
        "    const bottomRect = obstacle.bottom.getBoundingClientRect();\n",
        "\n",
        "    if (\n",
        "      birdRect.right > topRect.left && birdRect.left < topRect.right && (\n",
        "        birdRect.top < topRect.bottom || birdRect.bottom > bottomRect.top\n",
        "      )\n",
        "    ) {\n",
        "      gameOver();\n",
        "    }\n",
        "  });\n",
        "}\n",
        "\n",
        "function flap() {\n",
        "  if (!gameStarted || isGameOver) return;\n",
        "  velocity = -10;\n",
        "  bird.style.animation = 'wingFlap 0.2s';\n",
        "  setTimeout(() => bird.style.animation = '', 200);\n",
        "}\n",
        "\n",
        "function gameOver() {\n",
        "  isGameOver = true;\n",
        "  clearInterval(gameLoop);\n",
        "  alert(`Game Over! Score: ${score}`);\n",
        "  location.reload();\n",
        "}\n",
        "\n",
        "function startGame() {\n",
        "  gameStarted = true;\n",
        "  isGameOver = false;\n",
        "  startScreen.style.display = 'none';\n",
        "\n",
        "  setInterval(createObstacle, 2000);\n",
        "  setInterval(createCloud, 3000);\n",
        "  gameLoop = setInterval(updateGame, 16);\n",
        "}\n",
        "\n",
        "document.addEventListener('keydown', (e) => {\n",
        "  if (e.code === 'Space') {\n",
        "    e.preventDefault();\n",
        "    flap();\n",
        "  }\n",
        "});\n",
        "\n",
        "document.addEventListener('click', flap);\n",
        "startButton.addEventListener('click', startGame);\n",
        "</script>\n",
        "</body></html>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "MDq7gR0zviZL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SojMA0Rrvm7Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "E57E4g7XvoG7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "1ojdGBOZumAE"
      }
    }
  ]
}